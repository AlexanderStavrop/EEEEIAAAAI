% %% Pattern Recognition 2019
% %  Exercise 1.3 | Linear Discriminant Analysis
% %
% %  Instructions
% %  ------------
% %
% %  This file contains code that helps you get started on the
% %  exercise. You will need to complete the following functions:
% %
% %     myPCA.m
% %     fisherLinearDiscriminant.m  (for 2-class LDA)
% %	  myLDA.m  (for multiclass LDA)
% %     projectDataLDA.m
% %     projectDataPCA.m
% %     recoverDataLDA.m
% %     recoverDataPCA.m
% %
% %
% 
%% Initialization
close all; 
clear; 
clc

% %% ====================== Part Α_1: Load the Dataset ======================
% fprintf('Part Α_1 (LDA): Loading the dataset.\n');
% 
% %  The following command loads the dataset. You should now have the 
% %  variable X in your environment
% load ('data/data2.mat');
% 
% %% ====================== Part Α_2: standardization =======================
% %  Before running LDA, it is important to first normalize X
% [X_norm, ~, ~] = featureNormalize(X);
% 
% X1 = X_norm(c==1, :);
% X2 = X_norm(c==2, :);
% 
% %  Visualize the example dataset
% fprintf('Part Α_2 (LDA): Visualizing example dataset.\n');
% figure('Name','LDA normalized');
% title('Normilized features - LDA')
% hold on
% plot(X1(:, 1), X1(:, 2), 'bo');
% plot(X2(:, 1), X2(:, 2), 'rs');
% axis([-2.1 2.1 -2.1 2.1]); axis square;
% hold off
% 
% %  Visualize the example dataset
% figure('Name','LDA Projection and Recover');
% title('Projected and Recovered data - LDA')
% hold on
% plot(X1(:, 1), X1(:, 2), 'bo');
% plot(X2(:, 1), X2(:, 2), 'rs');
% axis([-2.1 2.1 -2.1 2.1]); axis square;
% hold off
% 
% %% ===================== Part Α_3: Fisher's LDA =========================
% fprintf('Part Α_3 (LDA): Running LDA on two features of the example dataset.\n');
% v = fisherLinearDiscriminant(X1, X2);
% 
% hold on
% drawLine(-5*v', 5*v', '-g', 'LineWidth', 1);
% hold off
%
% %% ==================== Part Α_4: Data projection =======================
% fprintf('Part Α_4 (LDA): Projecting the data of each feature to 1D from 2D.\n');
% 
% %  Project the data onto the direction of the one dimensional vector v
% [Z1] = projectDataLDA(X1, v);
% [Z2] = projectDataLDA(X2, v);
% 
% %% ===================== Part Α_5: Data recovery ========================
% fprintf('Part Α_5 (LDA): Recovering the data of each feature to 2D from 1D.\n');
% 
% % Reconstruct the data on the line defined by vector v
% [X1_rec]  = recoverDataLDA(Z1, v);
% [X2_rec]  = recoverDataLDA(Z2, v);
% 
% %  Draw lines connecting the projected points to the original points
% hold on;
% plot(X1_rec(:, 1), X1_rec(:, 2), 'bo', 'MarkerFaceColor', 'b');
% for i = 1:size(X1, 1)
%     drawLine(X1(i,:), X1_rec(i,:), '--k', 'LineWidth', 1);
% end
% 
% plot(X2_rec(:, 1), X2_rec(:, 2), 'rs', 'MarkerFaceColor', 'r');
% for i = 1:size(X2, 1)
%     drawLine(X2(i,:), X2_rec(i,:), '--k', 'LineWidth', 1);
% end
% hold off
% % print('~/Desktop/ex1_3_LDA_proj_rec', '-depsc')
% 
% %% ====================== Part Α_6: Running PCA =========================
% fprintf('Part Α_6 (PCA): Running PCA on example dataset.\n');
% 
% %  Run PCA
% [U, S] = myPCA(X_norm);
% 
% %  Project the data onto K = 1 dimension
% K = 1;
% Z = projectDataPCA(X_norm, U, K);
% X_rec = recoverDataPCA(Z, U, K);
% 
% %% ====================== Part Α_7: Visualizing PCA =====================
% %  Plot the normalized dataset (returned from principalComponentAnalysis)
% %  Draw lines connecting the projected points to the original points
% fprintf('Part Α_7 (PCA): Visualizing the dataset for PCA.\n');
% figure('Name','PCA visualization');
% title('Normilized features - PCA')
% hold on;
% axis([-2.1 2.1 -2.1 2.1]); axis square;
% drawLine(-2.3*U(:,1), 2.3*U(:,1), '-g', 'LineWidth', 1);
% plot(X1(:, 1), X1(:, 2), 'bo');
% plot(X2(:, 1), X2(:, 2), 'rs');
% plot(X_rec(c==1, 1), X_rec(c==1, 2), 'bo', 'MarkerFaceColor', 'b');
% plot(X_rec(c==2, 1), X_rec(c==2, 2), 'rs', 'MarkerFaceColor', 'r');
% for i = 1:size(X_norm, 1)
%     drawLine(X_norm(i,:), X_rec(i,:), '--k', 'LineWidth', 1);
% end
% hold off
% % print('~/Desktop/ex1_3_PCA', '-depsc')


%% ====================== PART B_1: FisherIris DATA =====================
fprintf('Part Β_1 (LDA): Loading the dataset.\n');
%  Apply LDA to the Fisher Iris Dataset
%  Load Fisher Iris Data
load('fisheriris.mat')

% Convert the species cell into an array containig class labels
% Class 0 for "setosa"
% Class 1 for "versicolor"
% Class 2 for "virginica"
iris_labels = 1*cellfun(@(x)isequal(x,'versicolor'),species)+2*cellfun(@(x)isequal(x,'virginica'),species);


%% ====================== PART B_2: Normalize DATA ======================
fprintf('Part Β_2 (LDA): Normalizing data.\n');

%  Before running PCA, it is important to first normalize X
[meas_norm, ~, ~] = featureNormalize(meas);

% Get the data for each class
IRIS1 = meas_norm(iris_labels == 0, :);	% Samples of Class 0
IRIS2 = meas_norm(iris_labels == 1, :);	% Samples of Class 1
IRIS3 = meas_norm(iris_labels == 2, :);	% Samples of Class 2


%% ====================== PART B_3: Visualizign DATA ====================
fprintf('Part Β_2 (LDA): Normalizing data.\n');
%  Visualize the example dataset
figure('Name','FisherIris DATA');
title('FisherIris data visualization')
hold on
plot(IRIS1(:, 1), IRIS1(:, 2), 'bo');
plot(IRIS2(:, 1), IRIS2(:, 2), 'rs');
plot(IRIS3(:, 1), IRIS3(:, 2), 'g+');
hold off

%% =============== PART B_3: FisherIris DATA ===============
% %  Apply LDA to the Fisher Iris Dataset
% %  Load Fisher Iris Data
% load('fisheriris.mat')
% 
% % Convert the species cell into an array containing class labels
% % Class 0 for "setosa"
% % Class 1 for "versicolor"
% % Class 2 for "virginica"
% iris_labels = 1*cellfun(@(x)isequal(x,'versicolor'),species)+2*cellfun(@(x)isequal(x,'virginica'),species);
% 
% 
% %% =============== PART B_2: FisherIris DATA ===============
% %  Before running PCA, it is important to first normalize X
% [meas_norm, mu, sigma] = featureNormalize(meas);
% 
% % Get the data for each class
% IRIS1 = meas_norm(iris_labels == 0, :);  % Samples of Class 0
% IRIS2 = meas_norm(iris_labels == 1, :);  % Samples of Class 1
% IRIS3 = meas_norm(iris_labels == 2, :);  % Samples of Class 2
% 
% %  Visualize the example dataset
% figure('Name','FisherIris DATA (Separated)');
% hold on
% plot(IRIS1(:, 1), IRIS1(:, 2), 'bo');
% plot(IRIS2(:, 1), IRIS2(:, 2), 'rs');
% plot(IRIS3(:, 1), IRIS3(:, 2), 'g+');
% hold off
% 
% %% =============== PART B_3: Apply LDA to Fisher Iris Dataset ===============
% NewDim = 2; % The new feature dimension after applying LDA
% v = myLDA(meas_norm, iris_labels, NewDim);
% 
% %  Project the data on the direction of the two-dimensional v
% [meas_reduced] = projectDataLDA(meas_norm, v);
% 
% %  Visualize the sample dataset after LDA is applied
% %  Use different color/symbol for each class
% figure('Name','FisherIris DATA (LDA)');
% hold on
% for i = 1:size(meas_reduced, 1)
%     if iris_labels(i) == 1
%         plot(meas_reduced(i, 1), meas_reduced(i, 2), 'bo'); % Versicolor
%     elseif iris_labels(i) == 2
%         plot(meas_reduced(i, 1), meas_reduced(i, 2), 'rs'); % Virginica
%     else
%         plot(meas_reduced(i, 1), meas_reduced(i, 2), 'g+'); % Setosa
%     end
% end
% hold off
% 
% % Adjust axis for better visualization
% axis tight;
